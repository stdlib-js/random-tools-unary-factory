{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils-define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils-define-nonenumerable-read-write-accessor' );\nvar isMethodIn = require( '@stdlib/assert-is-method-in' );\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar isPlainObject = require( '@stdlib/assert-is-plain-object' );\nvar isObject = require( '@stdlib/assert-is-object' );\nvar isCollection = require( '@stdlib/assert-is-collection' );\nvar isDataType = require( '@stdlib/ndarray-base-assert-is-data-type' );\nvar isOutputDataTypePolicy = require( '@stdlib/ndarray-base-assert-is-output-data-type-policy' );\nvar isOrder = require( '@stdlib/ndarray-base-assert-is-order' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar everyBy = require( '@stdlib/array-base-every-by' );\nvar constantFunction = require( '@stdlib/utils-constant-function' );\nvar noop = require( '@stdlib/utils-noop' );\nvar Random = require( '@stdlib/random-tools-unary' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Returns a function for generating pseudorandom values drawn from a unary PRNG.\n*\n* @param {Function} prng - unary pseudorandom value generator\n* @param {Function} prng.factory - method which returns a new unary pseudorandom value generator\n* @param {StringArray} idtypes - list of supported input data types\n* @param {StringArray} odtypes - list of supported output data types\n* @param {Object} policies - policies\n* @param {string} policies.output - output data type policy\n* @param {Object} options - options\n* @param {string} options.order - default memory layout (either row-major or column-major)\n* @throws {TypeError} first argument must be a function\n* @throws {TypeError} first argument must have a `factory` method\n* @throws {TypeError} second argument must be an array of supported data types\n* @throws {TypeError} third argument must be an array of supported data types\n* @throws {TypeError} fourth argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Function} function which returns a function for creating arrays\n*\n* @example\n* var dtypes = require( '@stdlib/ndarray-dtypes' );\n* var exponential = require( '@stdlib/random-base-exponential' );\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = dtypes( 'real_floating_point_and_generic' );\n*\n* var policies = {\n*     'output': 'real_floating_point_and_generic'\n* };\n* var options = {\n*     'order': 'row-major'\n* };\n*\n* var factory = createFactory( exponential, idt, odt, policies, options );\n*\n* var rand = factory();\n* // returns <Function>\n*\n* var v = rand( [ 2, 2 ], 2.0 );\n* // returns <ndarray>\n*\n* @example\n* var dtypes = require( '@stdlib/ndarray-dtypes' );\n* var ndzeros = require( '@stdlib/ndarray-zeros' );\n* var exponential = require( '@stdlib/random-base-exponential' );\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = dtypes( 'real_floating_point_and_generic' );\n*\n* var policies = {\n*     'output': 'real_floating_point_and_generic'\n* };\n* var options = {\n*     'order': 'row-major'\n* };\n*\n* var factory = createFactory( exponential, idt, odt, policies, options );\n*\n* var rand = factory();\n* // returns <Function>\n*\n* var out = ndzeros( [ 2, 2 ] );\n* var v = rand.assign( 2.0, out );\n* // returns <ndarray>\n*\n* var bool = ( v === out );\n* // returns true\n*/\nfunction createFactory( prng, idtypes, odtypes, policies, options ) {\n\tvar OPTIONS;\n\n\tif ( !isFunction( prng ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', prng ) );\n\t}\n\tif ( !isMethodIn( prng, 'factory' ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must have a `%s` method.', 'factory' ) );\n\t}\n\tif (\n\t\t!isCollection( idtypes ) ||\n\t\tidtypes.length < 1 ||\n\t\t!everyBy( idtypes, isDataType )\n\t) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an array of data types. Value: `%s`.', idtypes ) );\n\t}\n\tif (\n\t\t!isCollection( odtypes ) ||\n\t\todtypes.length < 1 ||\n\t\t!everyBy( odtypes, isDataType )\n\t) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an array of data types. Value: `%s`.', odtypes ) );\n\t}\n\tif ( !isObject( policies ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be an object. Value: `%s`.', policies ) );\n\t}\n\tif ( !isOutputDataTypePolicy( policies.output ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be an object having a supported output data type policy. Value: `%s`.', policies.output ) );\n\t}\n\tOPTIONS = {};\n\tif ( arguments.length > 4 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'order' ) ) {\n\t\t\tOPTIONS.order = options.order;\n\t\t\tif ( !isOrder( OPTIONS.order ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a valid memory layout. Option: `%s`.', 'order', OPTIONS.order ) );\n\t\t\t}\n\t\t}\n\t}\n\treturn factory;\n\n\t/**\n\t* Returns a function for generating pseudorandom values drawn from a unary PRNG.\n\t*\n\t* @private\n\t* @param {Options} [options] - function options\n\t* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n\t* @param {*} [options.seed] - pseudorandom value generator seed\n\t* @param {*} [options.state] - pseudorandom value generator state\n\t* @param {boolean} [options.copy] - boolean indicating whether to copy a provided pseudorandom value generator state\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {Function} function for creating ndarrays\n\t*/\n\tfunction factory() {\n\t\tvar random;\n\t\tvar base;\n\t\tvar opts;\n\n\t\tif ( arguments.length > 0 ) {\n\t\t\topts = arguments[ 0 ];\n\t\t\tif ( !isPlainObject( opts ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t\t}\n\t\t\tbase = prng.factory( opts );\n\t\t} else {\n\t\t\topts = {};\n\t\t\tbase = prng;\n\t\t}\n\t\trandom = new Random( base, idtypes, odtypes, policies, OPTIONS );\n\t\tif ( opts && opts.prng ) {\n\t\t\tsetReadOnly( rand, 'seed', null );\n\t\t\tsetReadOnly( rand, 'seedLength', null );\n\t\t\tsetReadWriteAccessor( rand, 'state', constantFunction( null ), noop );\n\t\t\tsetReadOnly( rand, 'stateLength', null );\n\t\t\tsetReadOnly( rand, 'byteLength', null );\n\t\t} else {\n\t\t\tsetReadOnlyAccessor( rand, 'seed', getSeed );\n\t\t\tsetReadOnlyAccessor( rand, 'seedLength', getSeedLength );\n\t\t\tsetReadWriteAccessor( rand, 'state', getState, setState );\n\t\t\tsetReadOnlyAccessor( rand, 'stateLength', getStateLength );\n\t\t\tsetReadOnlyAccessor( rand, 'byteLength', getStateSize );\n\t\t}\n\t\tsetReadOnly( rand, 'PRNG', base.PRNG );\n\t\tsetReadOnly( rand, 'assign', assign );\n\t\treturn rand;\n\n\t\t/**\n\t\t* Returns an ndarray filled with pseudorandom values drawn from a unary PRNG.\n\t\t*\n\t\t* @private\n\t\t* @param {NonNegativeIntegerArray} shape - output ndarray shape\n\t\t* @param {(ndarrayLike|*)} param1 - PRNG parameter\n\t\t* @param {Options} [options] - function options\n\t\t* @param {string} [options.dtype] - output data type\n\t\t* @param {string} [options.order] - memory layout (either row-major or column-major)\n\t\t* @param {string} [options.mode] - specifies how to handle indices which exceed ndarray dimensions\n\t\t* @param {StringArray} [options.submode] - specifies how to handle subscripts which exceed ndarray dimensions on a per dimension basis\n\t\t* @param {boolean} [options.readonly] - boolean indicating whether an ndarray should be read-only\n\t\t* @throws {TypeError} first argument must be a valid shape\n\t\t* @throws {TypeError} must provide valid PRNG parameters\n\t\t* @throws {TypeError} PRNG parameters and the desired shape must be broadcast compatible\n\t\t* @throws {TypeError} options argument must be an object\n\t\t* @throws {TypeError} must provide valid options\n\t\t* @returns {ndarray} output array\n\t\t*/\n\t\tfunction rand( shape, param1, options ) {\n\t\t\tif ( arguments.length < 3 ) {\n\t\t\t\treturn random.generate( shape, param1 );\n\t\t\t}\n\t\t\treturn random.generate( shape, param1, options );\n\t\t}\n\n\t\t/**\n\t\t* Fills an ndarray with pseudorandom values drawn from a unary PRNG.\n\t\t*\n\t\t* @private\n\t\t* @param {(ndarrayLike|*)} param1 - PRNG parameter\n\t\t* @param {ndarrayLike} out - output ndarray\n\t\t* @throws {TypeError} second argument must be an ndarray\n\t\t* @throws {TypeError} must provide valid PRNG parameters\n\t\t* @throws {TypeError} PRNG parameters and the output ndarray must be broadcast compatible\n\t\t* @returns {ndarray} output ndarray\n\t\t*/\n\t\tfunction assign( param1, out ) {\n\t\t\treturn random.assign( param1, out );\n\t\t}\n\n\t\t/**\n\t\t* Returns the PRNG seed.\n\t\t*\n\t\t* @private\n\t\t* @returns {*} seed\n\t\t*/\n\t\tfunction getSeed() {\n\t\t\treturn rand.PRNG.seed;\n\t\t}\n\n\t\t/**\n\t\t* Returns the PRNG seed length.\n\t\t*\n\t\t* @private\n\t\t* @returns {PositiveInteger} seed length\n\t\t*/\n\t\tfunction getSeedLength() {\n\t\t\treturn rand.PRNG.seedLength;\n\t\t}\n\n\t\t/**\n\t\t* Returns the PRNG state length.\n\t\t*\n\t\t* @private\n\t\t* @returns {PositiveInteger} state length\n\t\t*/\n\t\tfunction getStateLength() {\n\t\t\treturn rand.PRNG.stateLength;\n\t\t}\n\n\t\t/**\n\t\t* Returns the PRNG state size (in bytes).\n\t\t*\n\t\t* @private\n\t\t* @returns {PositiveInteger} state size (in bytes)\n\t\t*/\n\t\tfunction getStateSize() {\n\t\t\treturn rand.PRNG.byteLength;\n\t\t}\n\n\t\t/**\n\t\t* Returns the current pseudorandom value generator state.\n\t\t*\n\t\t* @private\n\t\t* @returns {*} current state\n\t\t*/\n\t\tfunction getState() {\n\t\t\treturn rand.PRNG.state;\n\t\t}\n\n\t\t/**\n\t\t* Sets the pseudorandom value generator state.\n\t\t*\n\t\t* @private\n\t\t* @param {*} s - generator state\n\t\t* @throws {Error} must provide a valid state\n\t\t*/\n\t\tfunction setState( s ) {\n\t\t\trand.PRNG.state = s;\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = createFactory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a function for generating pseudorandom values drawn from a unary PRNG.\n*\n* @module @stdlib/random-tools-unary-factory\n*\n* @example\n* var dtypes = require( '@stdlib/ndarray-dtypes' );\n* var exponential = require( '@stdlib/random-base-exponential' );\n* var unaryFactory = require( '@stdlib/random-tools-unary-factory' );\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = dtypes( 'real_floating_point_and_generic' );\n*\n* var policies = {\n*     'output': 'real_floating_point_and_generic'\n* };\n* var options = {\n*     'order': 'row-major'\n* };\n*\n* var factory = createFactory( exponential, idt, odt, policies, options );\n*\n* var rand = factory();\n* // returns <Function>\n*\n* var v = rand( [ 2, 2 ], 2.0 );\n* // returns <ndarray>\n*\n* @example\n* var dtypes = require( '@stdlib/ndarray-dtypes' );\n* var ndzeros = require( '@stdlib/ndarray-zeros' );\n* var exponential = require( '@stdlib/random-base-exponential' );\n* var unaryFactory = require( '@stdlib/random-tools-unary-factory' );\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = dtypes( 'real_floating_point_and_generic' );\n*\n* var policies = {\n*     'output': 'real_floating_point_and_generic'\n* };\n* var options = {\n*     'order': 'row-major'\n* };\n*\n* var factory = createFactory( exponential, idt, odt, policies, options );\n*\n* var rand = factory();\n* // returns <Function>\n*\n* var out = ndzeros( [ 2, 2 ] );\n* var v = rand.assign( 2.0, out );\n* // returns <ndarray>\n*\n* var bool = ( v === out );\n* // returns true\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,uDAAwD,EAC/EC,EAAsB,QAAS,uDAAwD,EACvFC,EAAuB,QAAS,wDAAyD,EACzFC,EAAa,QAAS,6BAA8B,EACpDC,EAAa,QAAS,4BAA6B,EACnDC,EAAgB,QAAS,gCAAiC,EAC1DC,EAAW,QAAS,0BAA2B,EAC/CC,EAAe,QAAS,8BAA+B,EACvDC,EAAa,QAAS,0CAA2C,EACjEC,EAAyB,QAAS,wDAAyD,EAC3FC,EAAU,QAAS,sCAAuC,EAC1DC,EAAa,QAAS,iCAAkC,EACxDC,EAAU,QAAS,6BAA8B,EACjDC,EAAmB,QAAS,iCAAkC,EAC9DC,EAAO,QAAS,oBAAqB,EACrCC,EAAS,QAAS,4BAA6B,EAC/CC,EAAS,QAAS,uBAAwB,EAyE9C,SAASC,EAAeC,EAAMC,EAASC,EAASC,EAAUC,EAAU,CACnE,IAAIC,EAEJ,GAAK,CAACnB,EAAYc,CAAK,EACtB,MAAM,IAAI,UAAWF,EAAQ,oEAAqEE,CAAK,CAAE,EAE1G,GAAK,CAACf,EAAYe,EAAM,SAAU,EACjC,MAAM,IAAI,UAAWF,EAAQ,4DAA6D,SAAU,CAAE,EAEvG,GACC,CAACT,EAAcY,CAAQ,GACvBA,EAAQ,OAAS,GACjB,CAACP,EAASO,EAASX,CAAW,EAE9B,MAAM,IAAI,UAAWQ,EAAQ,iFAAkFG,CAAQ,CAAE,EAE1H,GACC,CAACZ,EAAca,CAAQ,GACvBA,EAAQ,OAAS,GACjB,CAACR,EAASQ,EAASZ,CAAW,EAE9B,MAAM,IAAI,UAAWQ,EAAQ,gFAAiFI,CAAQ,CAAE,EAEzH,GAAK,CAACd,EAAUe,CAAS,EACxB,MAAM,IAAI,UAAWL,EAAQ,oEAAqEK,CAAS,CAAE,EAE9G,GAAK,CAACZ,EAAwBY,EAAS,MAAO,EAC7C,MAAM,IAAI,UAAWL,EAAQ,+GAAgHK,EAAS,MAAO,CAAE,EAGhK,GADAE,EAAU,CAAC,EACN,UAAU,OAAS,EAAI,CAC3B,GAAK,CAAClB,EAAeiB,CAAQ,EAC5B,MAAM,IAAI,UAAWN,EAAQ,qEAAsEM,CAAQ,CAAE,EAE9G,GAAKX,EAAYW,EAAS,OAAQ,IACjCC,EAAQ,MAAQD,EAAQ,MACnB,CAACZ,EAASa,EAAQ,KAAM,GAC5B,MAAM,IAAI,UAAWP,EAAQ,2EAA4E,QAASO,EAAQ,KAAM,CAAE,CAGrI,CACA,OAAOC,EAgBP,SAASA,GAAU,CAClB,IAAIC,EACAC,EACAC,EAEJ,GAAK,UAAU,OAAS,EAAI,CAE3B,GADAA,EAAO,UAAW,CAAE,EACf,CAACtB,EAAesB,CAAK,EACzB,MAAM,IAAI,UAAWX,EAAQ,qEAAsEW,CAAK,CAAE,EAE3GD,EAAOR,EAAK,QAASS,CAAK,CAC3B,MACCA,EAAO,CAAC,EACRD,EAAOR,EAER,OAAAO,EAAS,IAAIV,EAAQW,EAAMP,EAASC,EAASC,EAAUE,CAAQ,EAC1DI,GAAQA,EAAK,MACjB3B,EAAa4B,EAAM,OAAQ,IAAK,EAChC5B,EAAa4B,EAAM,aAAc,IAAK,EACtC1B,EAAsB0B,EAAM,QAASf,EAAkB,IAAK,EAAGC,CAAK,EACpEd,EAAa4B,EAAM,cAAe,IAAK,EACvC5B,EAAa4B,EAAM,aAAc,IAAK,IAEtC3B,EAAqB2B,EAAM,OAAQC,CAAQ,EAC3C5B,EAAqB2B,EAAM,aAAcE,CAAc,EACvD5B,EAAsB0B,EAAM,QAASG,EAAUC,CAAS,EACxD/B,EAAqB2B,EAAM,cAAeK,CAAe,EACzDhC,EAAqB2B,EAAM,aAAcM,CAAa,GAEvDlC,EAAa4B,EAAM,OAAQF,EAAK,IAAK,EACrC1B,EAAa4B,EAAM,SAAUO,CAAO,EAC7BP,EAqBP,SAASA,EAAMQ,EAAOC,EAAQf,EAAU,CACvC,OAAK,UAAU,OAAS,EAChBG,EAAO,SAAUW,EAAOC,CAAO,EAEhCZ,EAAO,SAAUW,EAAOC,EAAQf,CAAQ,CAChD,CAaA,SAASa,EAAQE,EAAQC,EAAM,CAC9B,OAAOb,EAAO,OAAQY,EAAQC,CAAI,CACnC,CAQA,SAAST,GAAU,CAClB,OAAOD,EAAK,KAAK,IAClB,CAQA,SAASE,GAAgB,CACxB,OAAOF,EAAK,KAAK,UAClB,CAQA,SAASK,GAAiB,CACzB,OAAOL,EAAK,KAAK,WAClB,CAQA,SAASM,GAAe,CACvB,OAAON,EAAK,KAAK,UAClB,CAQA,SAASG,GAAW,CACnB,OAAOH,EAAK,KAAK,KAClB,CASA,SAASI,EAAUO,EAAI,CACtBX,EAAK,KAAK,MAAQW,CACnB,CACD,CACD,CAKAxC,EAAO,QAAUkB,ICrOjB,IAAIuB,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "isMethodIn", "isFunction", "isPlainObject", "isObject", "isCollection", "isDataType", "isOutputDataTypePolicy", "isOrder", "hasOwnProp", "everyBy", "constantFunction", "noop", "Random", "format", "createFactory", "prng", "idtypes", "odtypes", "policies", "options", "OPTIONS", "factory", "random", "base", "opts", "rand", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "assign", "shape", "param1", "out", "s", "main"]
}
