{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport setReadWriteAccessor from '@stdlib/utils-define-nonenumerable-read-write-accessor';\nimport isMethodIn from '@stdlib/assert-is-method-in';\nimport isFunction from '@stdlib/assert-is-function';\nimport isPlainObject from '@stdlib/assert-is-plain-object';\nimport isObject from '@stdlib/assert-is-object';\nimport isCollection from '@stdlib/assert-is-collection';\nimport isDataType from '@stdlib/ndarray-base-assert-is-data-type';\nimport isOutputDataTypePolicy from '@stdlib/ndarray-base-assert-is-output-data-type-policy';\nimport isOrder from '@stdlib/ndarray-base-assert-is-order';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport everyBy from '@stdlib/array-base-every-by';\nimport constantFunction from '@stdlib/utils-constant-function';\nimport noop from '@stdlib/utils-noop';\nimport Random from '@stdlib/random-tools-unary';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Returns a function for generating pseudorandom values drawn from a unary PRNG.\n*\n* @param {Function} prng - unary pseudorandom value generator\n* @param {Function} prng.factory - method which returns a new unary pseudorandom value generator\n* @param {StringArray} idtypes - list of supported input data types\n* @param {StringArray} odtypes - list of supported output data types\n* @param {Object} policies - policies\n* @param {string} policies.output - output data type policy\n* @param {Object} options - options\n* @param {string} options.order - default memory layout (either row-major or column-major)\n* @throws {TypeError} first argument must be a function\n* @throws {TypeError} first argument must have a `factory` method\n* @throws {TypeError} second argument must be an array of strings\n* @throws {TypeError} third argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Function} function which returns a function for creating arrays\n*\n* @example\n* import dtypes from '@stdlib/ndarray-dtypes';\n* import exponential from '@stdlib/random-base-exponential';\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = dtypes( 'real_floating_point_and_generic' );\n*\n* var policies = {\n*     'output': 'real_floating_point_and_generic'\n* };\n* var options = {\n*     'order': 'row-major'\n* };\n*\n* var factory = createFactory( exponential, idt, odt, policies, options );\n*\n* var rand = factory();\n* // returns <Function>\n*\n* var v = rand( [ 2, 2 ], 2.0 );\n* // returns <ndarray>\n*\n* @example\n* import dtypes from '@stdlib/ndarray-dtypes';\n* import ndzeros from '@stdlib/ndarray-zeros';\n* import exponential from '@stdlib/random-base-exponential';\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = dtypes( 'real_floating_point_and_generic' );\n*\n* var policies = {\n*     'output': 'real_floating_point_and_generic'\n* };\n* var options = {\n*     'order': 'row-major'\n* };\n*\n* var factory = createFactory( exponential, idt, odt, policies, options );\n*\n* var rand = factory();\n* // returns <Function>\n*\n* var out = ndzeros( [ 2, 2 ] );\n* var v = rand.assign( 2.0, out );\n* // returns <ndarray>\n*\n* var bool = ( v === out );\n* // returns true\n*/\nfunction createFactory( prng, idtypes, odtypes, policies, options ) {\n\tvar OPTIONS;\n\n\tif ( !isFunction( prng ) ) {\n\t\tthrow new TypeError( format( 'null3c', prng ) );\n\t}\n\tif ( !isMethodIn( prng, 'factory' ) ) {\n\t\tthrow new TypeError( format( 'nullFM', 'factory' ) );\n\t}\n\tif (\n\t\t!isCollection( idtypes ) ||\n\t\tidtypes.length < 1 ||\n\t\t!everyBy( idtypes, isDataType )\n\t) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an array of data types. Value: `%s`.', idtypes ) );\n\t}\n\tif (\n\t\t!isCollection( odtypes ) ||\n\t\todtypes.length < 1 ||\n\t\t!everyBy( odtypes, isDataType )\n\t) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an array of data types. Value: `%s`.', odtypes ) );\n\t}\n\tif ( !isObject( policies ) ) {\n\t\tthrow new TypeError( format( 'null43', policies ) );\n\t}\n\tif ( !isOutputDataTypePolicy( policies.output ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be an object having a supported output data type policy. Value: `%s`.', policies.output ) );\n\t}\n\tOPTIONS = {};\n\tif ( arguments.length > 4 ) {\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'null2V', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'order' ) ) {\n\t\t\tOPTIONS.order = options.order;\n\t\t\tif ( !isOrder( OPTIONS.order ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a valid memory layout. Option: `%s`.', 'order', OPTIONS.order ) );\n\t\t\t}\n\t\t}\n\t}\n\treturn factory;\n\n\t/**\n\t* Returns a function for generating pseudorandom values drawn from a unary PRNG.\n\t*\n\t* @private\n\t* @param {Options} [options] - function options\n\t* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n\t* @param {*} [options.seed] - pseudorandom value generator seed\n\t* @param {*} [options.state] - pseudorandom value generator state\n\t* @param {boolean} [options.copy] - boolean indicating whether to copy a provided pseudorandom value generator state\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {Error} must provide a valid state\n\t* @returns {Function} function for creating arrays\n\t*/\n\tfunction factory() {\n\t\tvar random;\n\t\tvar base;\n\t\tvar opts;\n\n\t\tif ( arguments.length > 0 ) {\n\t\t\topts = arguments[ 0 ];\n\t\t\tbase = prng.factory( opts );\n\t\t} else {\n\t\t\topts = {};\n\t\t\tbase = prng;\n\t\t}\n\t\trandom = new Random( base, idtypes, odtypes, policies, OPTIONS );\n\t\tif ( opts && opts.prng ) {\n\t\t\tsetReadOnly( rand, 'seed', null );\n\t\t\tsetReadOnly( rand, 'seedLength', null );\n\t\t\tsetReadWriteAccessor( rand, 'state', constantFunction( null ), noop );\n\t\t\tsetReadOnly( rand, 'stateLength', null );\n\t\t\tsetReadOnly( rand, 'byteLength', null );\n\t\t} else {\n\t\t\tsetReadOnlyAccessor( rand, 'seed', getSeed );\n\t\t\tsetReadOnlyAccessor( rand, 'seedLength', getSeedLength );\n\t\t\tsetReadWriteAccessor( rand, 'state', getState, setState );\n\t\t\tsetReadOnlyAccessor( rand, 'stateLength', getStateLength );\n\t\t\tsetReadOnlyAccessor( rand, 'byteLength', getStateSize );\n\t\t}\n\t\tsetReadOnly( rand, 'PRNG', base.PRNG );\n\t\tsetReadOnly( rand, 'assign', assign );\n\t\treturn rand;\n\n\t\t/**\n\t\t* Returns an ndarray filled with pseudorandom values drawn from a unary PRNG.\n\t\t*\n\t\t* @private\n\t\t* @param {NonNegativeIntegerArray} shape - output ndarray shape\n\t\t* @param {(ndarrayLike|*)} param1 - PRNG parameter\n\t\t* @param {Options} [options] - function options\n\t\t* @param {string} [options.dtype] - output data type\n\t\t* @param {string} [options.order] - memory layout (either row-major or column-major)\n\t\t* @param {string} [options.mode] - specifies how to handle indices which exceed ndarray dimensions\n\t\t* @param {StringArray} [options.submode] - specifies how to handle subscripts which exceed ndarray dimensions on a per dimension basis\n\t\t* @param {boolean} [options.readonly] - boolean indicating whether an ndarray should be read-only\n\t\t* @throws {TypeError} first argument must be a valid shape\n\t\t* @throws {TypeError} must provide valid PRNG parameters\n\t\t* @throws {TypeError} PRNG parameters and the desired shape must be broadcast compatible\n\t\t* @throws {TypeError} options argument must be an object\n\t\t* @throws {TypeError} must provide valid options\n\t\t* @returns {ndarray} output array\n\t\t*/\n\t\tfunction rand( shape, param1, options ) {\n\t\t\tif ( arguments.length < 3 ) {\n\t\t\t\treturn random.generate( shape, param1 );\n\t\t\t}\n\t\t\treturn random.generate( shape, param1, options );\n\t\t}\n\n\t\t/**\n\t\t* Fills an ndarray with pseudorandom values drawn from a unary PRNG.\n\t\t*\n\t\t* @private\n\t\t* @param {(ndarrayLike|*)} param1 - PRNG parameter\n\t\t* @param {ndarrayLike} out - output ndarray\n\t\t* @throws {TypeError} second argument must be an ndarray\n\t\t* @throws {TypeError} must provide valid PRNG parameters\n\t\t* @throws {TypeError} PRNG parameters and the output ndarray must be broadcast compatible\n\t\t* @returns {ndarray} output ndarray\n\t\t*/\n\t\tfunction assign( param1, out ) {\n\t\t\treturn random.assign( param1, out );\n\t\t}\n\n\t\t/**\n\t\t* Returns the PRNG seed.\n\t\t*\n\t\t* @private\n\t\t* @returns {*} seed\n\t\t*/\n\t\tfunction getSeed() {\n\t\t\treturn rand.PRNG.seed;\n\t\t}\n\n\t\t/**\n\t\t* Returns the PRNG seed length.\n\t\t*\n\t\t* @private\n\t\t* @returns {PositiveInteger} seed length\n\t\t*/\n\t\tfunction getSeedLength() {\n\t\t\treturn rand.PRNG.seedLength;\n\t\t}\n\n\t\t/**\n\t\t* Returns the PRNG state length.\n\t\t*\n\t\t* @private\n\t\t* @returns {PositiveInteger} state length\n\t\t*/\n\t\tfunction getStateLength() {\n\t\t\treturn rand.PRNG.stateLength;\n\t\t}\n\n\t\t/**\n\t\t* Returns the PRNG state size (in bytes).\n\t\t*\n\t\t* @private\n\t\t* @returns {PositiveInteger} state size (in bytes)\n\t\t*/\n\t\tfunction getStateSize() {\n\t\t\treturn rand.PRNG.byteLength;\n\t\t}\n\n\t\t/**\n\t\t* Returns the current pseudorandom value generator state.\n\t\t*\n\t\t* @private\n\t\t* @returns {*} current state\n\t\t*/\n\t\tfunction getState() {\n\t\t\treturn rand.PRNG.state;\n\t\t}\n\n\t\t/**\n\t\t* Sets the pseudorandom value generator state.\n\t\t*\n\t\t* @private\n\t\t* @param {*} s - generator state\n\t\t* @throws {Error} must provide a valid state\n\t\t*/\n\t\tfunction setState( s ) {\n\t\t\trand.PRNG.state = s;\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default createFactory;\n"],"names":["createFactory","prng","idtypes","odtypes","policies","options","OPTIONS","isFunction","TypeError","format","isMethodIn","isCollection","length","everyBy","isDataType","isObject","isOutputDataTypePolicy","output","arguments","isPlainObject","hasOwnProp","order","isOrder","random","base","opts","factory","Random","setReadOnly","rand","setReadWriteAccessor","constantFunction","noop","setReadOnlyAccessor","PRNG","seed","seedLength","state","s","stateLength","byteLength","param1","out","assign","shape","generate"],"mappings":";;irDA8GA,SAASA,EAAeC,EAAMC,EAASC,EAASC,EAAUC,GACzD,IAAIC,EAEJ,IAAMC,EAAYN,GACjB,MAAM,IAAIO,UAAWC,EAAQ,SAAUR,IAExC,IAAMS,EAAYT,EAAM,WACvB,MAAM,IAAIO,UAAWC,EAAQ,SAAU,YAExC,IACEE,EAAcT,IACfA,EAAQU,OAAS,IAChBC,EAASX,EAASY,GAEnB,MAAM,IAAIN,UAAWC,EAAQ,iFAAkFP,IAEhH,IACES,EAAcR,IACfA,EAAQS,OAAS,IAChBC,EAASV,EAASW,GAEnB,MAAM,IAAIN,UAAWC,EAAQ,gFAAiFN,IAE/G,IAAMY,EAAUX,GACf,MAAM,IAAII,UAAWC,EAAQ,SAAUL,IAExC,IAAMY,EAAwBZ,EAASa,QACtC,MAAM,IAAIT,UAAWC,EAAQ,+GAAgHL,EAASa,SAGvJ,GADAX,EAAU,CAAA,EACLY,UAAUN,OAAS,EAAI,CAC3B,IAAMO,EAAed,GACpB,MAAM,IAAIG,UAAWC,EAAQ,SAAUJ,IAExC,GAAKe,EAAYf,EAAS,WACzBC,EAAQe,MAAQhB,EAAQgB,OAClBC,EAAShB,EAAQe,QACtB,MAAM,IAAIb,UAAWC,EAAQ,2EAA4E,QAASH,EAAQe,OAG5H,CACD,OAgBA,WACC,IAAIE,EACAC,EACAC,EAECP,UAAUN,OAAS,GACvBa,EAAOP,UAAW,GAClBM,EAAOvB,EAAKyB,QAASD,KAErBA,EAAO,CAAA,EACPD,EAAOvB,GAERsB,EAAS,IAAII,EAAQH,EAAMtB,EAASC,EAASC,EAAUE,GAClDmB,GAAQA,EAAKxB,MACjB2B,EAAaC,EAAM,OAAQ,MAC3BD,EAAaC,EAAM,aAAc,MACjCC,EAAsBD,EAAM,QAASE,EAAkB,MAAQC,GAC/DJ,EAAaC,EAAM,cAAe,MAClCD,EAAaC,EAAM,aAAc,QAEjCI,EAAqBJ,EAAM,QAyD5B,WACC,OAAOA,EAAKK,KAAKC,IACjB,IA1DAF,EAAqBJ,EAAM,cAkE5B,WACC,OAAOA,EAAKK,KAAKE,UACjB,IAnEAN,EAAsBD,EAAM,SA+F7B,WACC,OAAOA,EAAKK,KAAKG,KACjB,IASD,SAAmBC,GAClBT,EAAKK,KAAKG,MAAQC,CAClB,IA3GAL,EAAqBJ,EAAM,eA0E5B,WACC,OAAOA,EAAKK,KAAKK,WACjB,IA3EAN,EAAqBJ,EAAM,cAmF5B,WACC,OAAOA,EAAKK,KAAKM,UACjB,KAjFD,OAFAZ,EAAaC,EAAM,OAAQL,EAAKU,MAChCN,EAAaC,EAAM,UAwCnB,SAAiBY,EAAQC,GACxB,OAAOnB,EAAOoB,OAAQF,EAAQC,EAC9B,IAzCMb,EAqBP,SAASA,EAAMe,EAAOH,EAAQpC,GAC7B,OAAKa,UAAUN,OAAS,EAChBW,EAAOsB,SAAUD,EAAOH,GAEzBlB,EAAOsB,SAAUD,EAAOH,EAAQpC,EACvC,CA6ED,CACF"}